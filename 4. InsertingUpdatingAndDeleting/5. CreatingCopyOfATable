Creating a Copy of a Table
    Copy a data from one table to another. This is for reducing time consuming to insert thousand of rows
    when we want to 'store', 'archived', or something like that in a new table.
    For this we can use:
     CREATE TABLE AS statement to create quickly a copy of a table. But MySQL will ignore column attributes 
     Truncate the table means delete all rows(right click over table name to truncate it)
        then we can use INSERT INTO instead create from zero.

    Syntax:
        CREATE TABLE tableNameCopy AS 
        SELECT *
        FROM tableNameOriginal

    e.x copy the orders table to a new orders_archived table.
        CREATE TABLE orders_archived AS
        SELECT *
        FROM orders

    e.x copy only a subset of the records(orders < 2019) from the order table into orders_archived table.
        this is an example of using a SELECT statement as a subquery in an INSERT INTO statement.

        INSERT INTO orders_archived 
        SELECT *
        FROM orders
        WHERE order_date < '2019-01-01'


Exercise. In sql_invoicing database, create a copy of records from invoices table and put them new 
          invoices_archived table. But instead of client_id we want to have client name column. Also
          copy only the invoices that do have a payment(payment_date)

-- Query

USE sql_invoicing;
CREATE TABLE invoices_archived AS
SELECT i.invoice_id, 
	i.number, 
    c.name AS client, 
    i.invoice_total,
    i.payment_total, 
    i.invoice_date, 
    i.due_date, 
    i.payment_date
FROM invoices i
JOIN clients c
    USING (client_id)
WHERE i.payment_date IS NOT NULL


